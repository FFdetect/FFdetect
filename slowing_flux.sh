#!/bin/bash

#### Variables

## Repertoires de destination

# repertoire pour les fichiers temporaires
REP_TMP="/tmp"

# repertoire pour les regles snort
REP_SNORT_RULES="/etc/snort/rules"

## Autre

# en-tete des fichiers temporaires
EXT_TMP="fastflux_"

## premier numero de regle
First_Rule_number="90000"

## mode debug
DEBUG=true

#### Fonctions

## Init

init() {
	touch /$REP_TMP/$EXT_TMP""liste_domaines_TOT
}

## debug mode

debug() {
	if [ $DEBUG == true ]; then
		OUT="/dev/stdout"
	else
		OUT="/dev/null"
	fi
}

## recuperation des fichiers black liste

recup_liste_spyeyettracker() {
	
	wget --no-check-certificate -O $REP_TMP/$EXT_TMP""liste_spy_brut "https://spyeyetracker.abuse.ch/blocklist.php?download=domainblocklist" 
	tail -n +7 /$REP_TMP/$EXT_TMP""liste_spy_brut > /$REP_TMP/$EXT_TMP""liste_spy


	echo "$liste_spy"
	addDomain /$REP_TMP/$EXT_TMP""liste_spy

}

recup_liste_malwaredomains() {
	
	wget -O $REP_TMP/$EXT_TMP""malwaredomains_brut "http://malwaredomains.lehigh.edu/files/domains.txt" 
	tail -n +6 /$REP_TMP/$EXT_TMP""malwaredomains_brut > /$REP_TMP/$EXT_TMP""malwaredomains_brut2
	grep "fastflux" /$REP_TMP/$EXT_TMP""malwaredomains_brut2 |cut -f3 > /$REP_TMP/$EXT_TMP""malwaredomains_ff

	echo "$malwaredomains_ff"
	addDomain /$REP_TMP/$EXT_TMP""malwaredomains_ff

}

recup_liste_zeus() {
	wget --no-check-certificate -O $REP_TMP/$EXT_TMP""zeus_brut "https://zeustracker.abuse.ch/blocklist.php?download=domainblocklist" 
	tail -n +7 /$REP_TMP/$EXT_TMP""zeus_brut > /$REP_TMP/$EXT_TMP""zeus_brut2

	echo "$zeus_brut2"
	addDomain /$REP_TMP/$EXT_TMP""zeus_brut2

}

recup_liste_palevo() {
	wget --no-check-certificate -O $REP_TMP/$EXT_TMP""palevo_brut "https://palevotracker.abuse.ch/blocklists.php?download=domainblocklist" 
	tail -n +1 /$REP_TMP/$EXT_TMP""palevo_brut > /$REP_TMP/$EXT_TMP""palevo_brut2
	echo "$palevo_brut2"
	addDomain /$REP_TMP/$EXT_TMP""palevo_brut2
	
}

## ajout des domaines dans la liste totale sans doublon

addDomain() { #fichier liste domaine d'un tracker en particulier
	local RESULT=""
	while read line
	do
		RESULT=`grep "$line" /$REP_TMP/$EXT_TMP""liste_domaines_TOT`
		if [ "$RESULT" == "" ]
		then
			echo "$line" >> /$REP_TMP/$EXT_TMP""liste_domaines_TOT
		fi
	done < "$1"	
}

## creation du fichier de regles snort contenant les domaines black-listes

create_rules() {
	local fic_rules="$REP_SNORT_RULES/black-liste_fast-flux.rules"
	local rule_id=$First_Rule_number
	
	if [ -f $fic_rules ]
	then
		cp $fic_rules $fic_rules.back	
	fi
	
	echo "# File automaticaly generated by slowing_flux" > $fic_rules
	echo "# last updated : " $(date -u) >> $fic_rules
	
	while read line
	do
		echo 'alert tcp $HOME_NET any -> $EXTERNAL_NET $HTTP_PORTS (msg:"Fast-flux domain : '$line'"; content:"Host: "; content: "'$line'|0d 0a|"; nocase; content:"GET"; http_method; classtype:fast-flux; sid:'$rule_id';rev:1;)' >> $fic_rules
		
#echo 'alert tcp $EXTERNAL_NET $HTTP_PORTS -> $HOME_NET any (msg:"Fast-flux domain :'$line'"; content:"Host\: '$line'"; flow:to_server, established; nocase; classtype:fast-flux; sid:'$rule_id' ; rev:1;)' >> $fic_rules
		
		rule_id=$(($rule_id+1))
	done < /$REP_TMP/$EXT_TMP""liste_domaines_TOT
}

reload_snort() {
	local snort_pid=""
	
	snort_pid=`ps a |grep snort |grep Sl |cut -d " " -f2`
	kill -SIGHUP $snort_pid
}

## suppression des fichiers temporaires
nettoyage() {
	if [ ! $DEBUG ]; then
		rm $REP_TMP/$EXT_TMP""*;
	fi
}

############################################ Main #################################################
if [ $# -eq 0 ]
then
	DEBUG=false
else
	if [ "$1" == "-d" ]
	then
		DEBUG=true		
	fi
fi



debug

init

recup_liste_spyeyettracker

recup_liste_malwaredomains

recup_liste_zeus

recup_liste_palevo

create_rules

reload_snort

nettoyage
